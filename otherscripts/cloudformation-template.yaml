AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloud Formation stack to create:
    - S3 buckets: t1-website (public website) and t1-image-storage
    - IAM role for Lambda execution
    - Two Lambda functions (index + search)
    - API Gateway with GET /search and PUT /upload/{objectKey}

Resources:

  ### S3 Buckets ###

  T1WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-website-bucket'
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  T1WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref T1WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub '${T1WebsiteBucket.Arn}/*'


  T1ImageStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: t1-image-storage

  ### IAM Role for Lambda ###

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cf-lambda-exec-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ### Lambda Functions ###

  T1LF1IndexPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: t1-lf1-index-photos
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import urllib.parse
          import os
          from datetime import datetime
          import json
          import requests
          from requests.auth import HTTPBasicAuth

          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')

          OPENSEARCH_HOST = os.environ['OPENSEARCH_HOST']
          OPENSEARCH_USERNAME = os.environ['OPENSEARCH_USERNAME']
          OPENSEARCH_PASSWORD = os.environ['OPENSEARCH_PASSWORD']
          INDEX = 'photos'

          def lambda_handler(event, context):
              print("region = ", os.environ['AWS_REGION'])
              print(event)
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = urllib.parse.unquote_plus(record['s3']['object']['key'])

                  print(f"Processing {key} in {bucket}")

                  # Step 1: Detect labels
                  rekog_response = rekognition.detect_labels(
                      Image={'S3Object': {'Bucket': bucket, 'Name': key}},
                      MaxLabels=10
                  )
                  rekog_labels = [label['Name'].lower() for label in rekog_response['Labels']]

                  print("rekog_labels = ", rekog_labels)

                  # Step 2: Retrieve custom labels from S3 metadata
                  s3_head = s3.head_object(Bucket=bucket, Key=key)
                  custom_labels_raw = s3_head['Metadata'].get('customlabels', '')
                  custom_labels = [label.strip().lower() for label in custom_labels_raw.split(',')] if custom_labels_raw else []

                  print("custom_labels = ", custom_labels)

                  # Combine labels
                  all_labels = list(set(rekog_labels + custom_labels))

                  print("all_labels = ", all_labels)

                  # Step 3: Prepare JSON document
                  document = {
                      'objectKey': key,
                      'bucket': bucket,
                      'createdTimestamp': s3_head['LastModified'].isoformat(),
                      'labels': all_labels
                  }

                  # Step 4: Index to OpenSearch using requests
                  url = f"https://{OPENSEARCH_HOST}/{INDEX}/_doc/{urllib.parse.quote_plus(key)}"
                  headers = {"Content-Type": "application/json"}

                  response = requests.put(
                      url,
                      auth=HTTPBasicAuth(OPENSEARCH_USERNAME, OPENSEARCH_PASSWORD),
                      headers=headers,
                      data=json.dumps(document)
                  )

                  print(f"Indexed {key}: {response.status_code} {response.text}")


  T2LF2SearchPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: t2-lf2-search-photos
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import requests
          from time import time
          from random import random
          from requests.auth import HTTPBasicAuth

          LEX_BOT_ID = os.environ['LEX_BOT_ID']
          LEX_BOT_ALIAS_ID = os.environ['LEX_BOT_ALIAS_ID']
          LEX_LOCALE_ID = 'en_US'
          OPENSEARCH_HOST = os.environ['OPENSEARCH_HOST']
          OPENSEARCH_INDEX = 'photos'
          OPENSEARCH_USERNAME = os.environ['OPENSEARCH_USERNAME']
          OPENSEARCH_PASSWORD = os.environ['OPENSEARCH_PASSWORD']
          SEARCH_URL = f"https://{OPENSEARCH_HOST}/{OPENSEARCH_INDEX}/_search"

          lex = boto3.client('lexv2-runtime')

          def lambda_handler(event, context):

              # Get query from user input
              query = event.get('q', '')
              if not query:
                  return { "results": [] }

              # Call Lex V2 to interpret query
              response = lex.recognize_text(
                  botId=LEX_BOT_ID,
                  botAliasId=LEX_BOT_ALIAS_ID,
                  localeId=LEX_LOCALE_ID,
                  sessionId=f'searchSession-{int(random()*time())}',
                  text=query
              )

              # Extract interpreted values
              slots = response.get('sessionState', {}).get('intent', {}).get('slots', {})
              keyword_values = slots.get('Keywords', {}).get('values', [])
              search_keywords = [val['value']['interpretedValue'] for val in keyword_values]
              if not search_keywords:
                  return { "results": [] }

              print("search_keywords = ", search_keywords)

              # Fuzzy search using keywords in OpenSearch
              os_response = requests.get(
                  SEARCH_URL,
                  auth=HTTPBasicAuth(OPENSEARCH_USERNAME, OPENSEARCH_PASSWORD),
                  headers={"Content-Type": "application/json"},
                  data=json.dumps(build_fuzzy_query(search_keywords))
              )

              hits = os_response.json().get('hits', {}).get('hits', [])
              results = [hit.get('_source', {}) for hit in hits]
              
              print(results)

              return { "results": results }


          def build_fuzzy_query(keywords):
              should_clauses = [
                  {
                      "match": {
                          "labels": {
                              "query": keyword,
                              "fuzziness": "AUTO"
                          }
                      }
                  } for keyword in keywords
              ]
              return {
                  "query": {
                      "bool": {
                          "should": should_clauses
                      }
                  }
              }

  ### API Gateway ###

  T1Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: T1-AI-Photo-Album

  # Role for API Gateway to invoke Lambda
  ApiGatewayLambdaRole:
    Type: AWS::IAM::Role
    DependsOn: T2LF2SearchPhotosFunction
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeSearchLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt T2LF2SearchPhotosFunction.Arn

  ## GET /search ##
  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref T1Api
      ParentId: !GetAtt T1Api.RootResourceId
      PathPart: search

  SearchMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: T2LF2SearchPhotosFunction
    Properties:
      RestApiId: !Ref T1Api
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
      - StatusCode: 200
      # Integration:
      #   Type: AWS_PROXY
      #   IntegrationHttpMethod: POST
      #   Uri: !Sub |
      #     arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${T2LF2SearchPhotosFunction.Arn}/invocations
      #   Credentials: !GetAtt ApiGatewayLambdaRole.Arn

  SearchPermission:
    Type: AWS::Lambda::Permission
    DependsOn: T2LF2SearchPhotosFunction
    Properties:
      FunctionName: !Ref T2LF2SearchPhotosFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${T1Api}/*/GET/search

  ## PUT /upload/{objectKey} ##
  UploadRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref T1Api
      ParentId: !GetAtt T1Api.RootResourceId
      PathPart: upload

  UploadKeyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref T1Api
      ParentId: !Ref UploadRootResource
      PathPart: '{objectKey}'

  UploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref T1Api
      ResourceId: !Ref UploadKeyResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.objectKey: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Uri: !Sub |
          arn:aws:apigateway:${AWS::Region}:s3:path/${T1ImageStorageBucket}/{objectKey}
        Credentials: !GetAtt ApiGatewayS3Role.Arn
        RequestParameters:
          integration.request.path.objectKey: method.request.path.objectKey
        PassthroughBehavior: WHEN_NO_MATCH

  ApiGatewayS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowS3PutObject
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${T1ImageStorageBucket}/*'

  # ApiDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   DependsOn:
  #     - SearchMethod
  #     - UploadMethod
  #   Properties:
  #     RestApiId: !Ref T1Api
  #     StageName: Prod

Outputs:
  ApiInvokeURL:
    Description: "Invoke URL for Prod stage"
    Value: !Sub "https://${T1Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  FrontendWebsiteURL:
    Description: "Public URL for t1-frontend website"
    Value: !Sub "http://${T1WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"